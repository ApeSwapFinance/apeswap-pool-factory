{
  "contractName": "Multicall2",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "aggregate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "returnData",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "blockAndAggregate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "returnData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Result[]",
          "name": "returnData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getBlockHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockCoinbase",
      "outputs": [
        {
          "internalType": "address",
          "name": "coinbase",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockDifficulty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "difficulty",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockGasLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "gaslimit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getEthBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastBlockHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "requireSuccess",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "tryAggregate",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "returnData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Result[]",
          "name": "returnData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "requireSuccess",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "tryBlockAndAggregate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "returnData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Result[]",
          "name": "returnData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"aggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"returnData\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"blockAndAggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockCoinbase\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"coinbase\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockDifficulty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"difficulty\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gaslimit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"requireSuccess\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"tryAggregate\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"requireSuccess\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"tryBlockAndAggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/Users/defifofum/Code/ApeSwap/apeswap-swap-periphery/contracts/utils/Multicall2.sol\":\"Multicall2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"/Users/defifofum/Code/ApeSwap/apeswap-swap-periphery/contracts/utils/Multicall2.sol\":{\"keccak256\":\"0x7eb27b0de72f32ac19d42b94965355acc77602ac7926cfc7347a1a328cecf315\",\"urls\":[\"bzz-raw://55360560f4e765c737b0de0fa555e0d647933b2977346840eb02e456acd3830c\",\"dweb:/ipfs/QmUFsm8UdBsyd4cospkSPX34ozPrWp3w436RAu1M7sxUUT\"]}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610a81806100206000396000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c806372425d9d11610081578063bce38bd71161005b578063bce38bd714610182578063c3077fa9146101a2578063ee82ac5e146101b5576100d4565b806372425d9d1461015d57806386d516e814610165578063a8b0574e1461016d576100d4565b8063399542e9116100b2578063399542e91461012057806342cbb15c146101425780634d2301cc1461014a576100d4565b80630f28c97d146100d9578063252dba42146100f757806327e86d6e14610118575b600080fd5b6100e16101c8565b6040516100ee91906108ab565b60405180910390f35b61010a610105366004610702565b6101cc565b6040516100ee929190610946565b6100e1610332565b61013361012e36600461073d565b610359565b6040516100ee939291906109cc565b6100e1610371565b6100e16101583660046106e0565b610375565b6100e161038f565b6100e1610393565b610175610397565b6040516100ee9190610877565b61019561019036600461073d565b61039b565b6040516100ee9190610898565b6101336101b0366004610702565b610518565b6100e16101c336600461078f565b610535565b4290565b8051439060609067ffffffffffffffff811180156101e957600080fd5b5060405190808252806020026020018201604052801561021d57816020015b60608152602001906001900390816102085790505b50905060005b835181101561032c576000606085838151811061023c57fe5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1686848151811061026a57fe5b602002602001015160200151604051610283919061085b565b6000604051808303816000865af19150503d80600081146102c0576040519150601f19603f3d011682016040523d82523d6000602084013e6102c5565b606091505b50915091508161030a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030190610911565b60405180910390fd5b8084848151811061031757fe5b60209081029190910101525050600101610223565b50915091565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff43014090565b4380406060610368858561039b565b90509250925092565b4390565b73ffffffffffffffffffffffffffffffffffffffff163190565b4490565b4590565b4190565b6060815167ffffffffffffffff811180156103b557600080fd5b506040519080825280602002602001820160405280156103ef57816020015b6103dc610539565b8152602001906001900390816103d45790505b50905060005b8251811015610511576000606084838151811061040e57fe5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1685848151811061043c57fe5b602002602001015160200151604051610455919061085b565b6000604051808303816000865af19150503d8060008114610492576040519150601f19603f3d011682016040523d82523d6000602084013e610497565b606091505b509150915085156104d957816104d9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610301906108b4565b60405180604001604052808315158152602001828152508484815181106104fc57fe5b602090810291909101015250506001016103f5565b5092915050565b6000806060610528600185610359565b9196909550909350915050565b4090565b60408051808201909152600081526060602082015290565b803573ffffffffffffffffffffffffffffffffffffffff8116811461057557600080fd5b92915050565b600082601f83011261058b578081fd5b813567ffffffffffffffff808211156105a2578283fd5b60206105b181828502016109f4565b838152935080840185820160005b8581101561064d57813588016040807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0838d030112156105fe57600080fd5b610607816109f4565b6106138c888501610551565b8152818301358881111561062657600080fd5b6106348d8983870101610659565b82890152508552505091830191908301906001016105bf565b50505050505092915050565b600082601f830112610669578081fd5b813567ffffffffffffffff81111561067f578182fd5b6106b060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116016109f4565b91508082528360208285010111156106c757600080fd5b8060208401602084013760009082016020015292915050565b6000602082840312156106f1578081fd5b6106fb8383610551565b9392505050565b600060208284031215610713578081fd5b813567ffffffffffffffff811115610729578182fd5b6107358482850161057b565b949350505050565b6000806040838503121561074f578081fd5b8235801515811461075e578182fd5b9150602083013567ffffffffffffffff811115610779578182fd5b6107858582860161057b565b9150509250929050565b6000602082840312156107a0578081fd5b5035919050565b6000815180845260208085018081965082840281019150828601855b85811015610804578284038952815160408151151586528682015181888801526107ef82880182610811565b9b88019b9650505091850191506001016107c3565b5091979650505050505050565b60008151808452610829816020860160208601610a1b565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000825161086d818460208701610a1b565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b6000602082526106fb60208301846107a7565b90815260200190565b60208082526021908201527f4d756c746963616c6c32206167677265676174653a2063616c6c206661696c6560408201527f6400000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f4d756c746963616c6c206167677265676174653a2063616c6c206661696c6564604082015260600190565b600060408201848352602060408185015281855180845260608601915060608382028701019350828701855b828110156109be577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa08887030184526109ac868351610811565b95509284019290840190600101610972565b509398975050505050505050565b6000848252836020830152606060408301526109eb60608301846107a7565b95945050505050565b60405181810167ffffffffffffffff81118282101715610a1357600080fd5b604052919050565b60005b83811015610a36578181015183820152602001610a1e565b83811115610a45576000848401525b5050505056fea2646970667358221220b5941bb8cffc0df659737d5dfe5c0a67ff84372e0e024a02fc2c4ebd1b78fc1c64736f6c63430006060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100d45760003560e01c806372425d9d11610081578063bce38bd71161005b578063bce38bd714610182578063c3077fa9146101a2578063ee82ac5e146101b5576100d4565b806372425d9d1461015d57806386d516e814610165578063a8b0574e1461016d576100d4565b8063399542e9116100b2578063399542e91461012057806342cbb15c146101425780634d2301cc1461014a576100d4565b80630f28c97d146100d9578063252dba42146100f757806327e86d6e14610118575b600080fd5b6100e16101c8565b6040516100ee91906108ab565b60405180910390f35b61010a610105366004610702565b6101cc565b6040516100ee929190610946565b6100e1610332565b61013361012e36600461073d565b610359565b6040516100ee939291906109cc565b6100e1610371565b6100e16101583660046106e0565b610375565b6100e161038f565b6100e1610393565b610175610397565b6040516100ee9190610877565b61019561019036600461073d565b61039b565b6040516100ee9190610898565b6101336101b0366004610702565b610518565b6100e16101c336600461078f565b610535565b4290565b8051439060609067ffffffffffffffff811180156101e957600080fd5b5060405190808252806020026020018201604052801561021d57816020015b60608152602001906001900390816102085790505b50905060005b835181101561032c576000606085838151811061023c57fe5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1686848151811061026a57fe5b602002602001015160200151604051610283919061085b565b6000604051808303816000865af19150503d80600081146102c0576040519150601f19603f3d011682016040523d82523d6000602084013e6102c5565b606091505b50915091508161030a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030190610911565b60405180910390fd5b8084848151811061031757fe5b60209081029190910101525050600101610223565b50915091565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff43014090565b4380406060610368858561039b565b90509250925092565b4390565b73ffffffffffffffffffffffffffffffffffffffff163190565b4490565b4590565b4190565b6060815167ffffffffffffffff811180156103b557600080fd5b506040519080825280602002602001820160405280156103ef57816020015b6103dc610539565b8152602001906001900390816103d45790505b50905060005b8251811015610511576000606084838151811061040e57fe5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1685848151811061043c57fe5b602002602001015160200151604051610455919061085b565b6000604051808303816000865af19150503d8060008114610492576040519150601f19603f3d011682016040523d82523d6000602084013e610497565b606091505b509150915085156104d957816104d9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610301906108b4565b60405180604001604052808315158152602001828152508484815181106104fc57fe5b602090810291909101015250506001016103f5565b5092915050565b6000806060610528600185610359565b9196909550909350915050565b4090565b60408051808201909152600081526060602082015290565b803573ffffffffffffffffffffffffffffffffffffffff8116811461057557600080fd5b92915050565b600082601f83011261058b578081fd5b813567ffffffffffffffff808211156105a2578283fd5b60206105b181828502016109f4565b838152935080840185820160005b8581101561064d57813588016040807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0838d030112156105fe57600080fd5b610607816109f4565b6106138c888501610551565b8152818301358881111561062657600080fd5b6106348d8983870101610659565b82890152508552505091830191908301906001016105bf565b50505050505092915050565b600082601f830112610669578081fd5b813567ffffffffffffffff81111561067f578182fd5b6106b060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116016109f4565b91508082528360208285010111156106c757600080fd5b8060208401602084013760009082016020015292915050565b6000602082840312156106f1578081fd5b6106fb8383610551565b9392505050565b600060208284031215610713578081fd5b813567ffffffffffffffff811115610729578182fd5b6107358482850161057b565b949350505050565b6000806040838503121561074f578081fd5b8235801515811461075e578182fd5b9150602083013567ffffffffffffffff811115610779578182fd5b6107858582860161057b565b9150509250929050565b6000602082840312156107a0578081fd5b5035919050565b6000815180845260208085018081965082840281019150828601855b85811015610804578284038952815160408151151586528682015181888801526107ef82880182610811565b9b88019b9650505091850191506001016107c3565b5091979650505050505050565b60008151808452610829816020860160208601610a1b565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000825161086d818460208701610a1b565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b6000602082526106fb60208301846107a7565b90815260200190565b60208082526021908201527f4d756c746963616c6c32206167677265676174653a2063616c6c206661696c6560408201527f6400000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f4d756c746963616c6c206167677265676174653a2063616c6c206661696c6564604082015260600190565b600060408201848352602060408185015281855180845260608601915060608382028701019350828701855b828110156109be577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa08887030184526109ac868351610811565b95509284019290840190600101610972565b509398975050505050505050565b6000848252836020830152606060408301526109eb60608301846107a7565b95945050505050565b60405181810167ffffffffffffffff81118282101715610a1357600080fd5b604052919050565b60005b83811015610a36578181015183820152602001610a1e565b83811115610a45576000848401525b5050505056fea2646970667358221220b5941bb8cffc0df659737d5dfe5c0a67ff84372e0e024a02fc2c4ebd1b78fc1c64736f6c63430006060033",
  "immutableReferences": {},
  "sourceMap": "92:2641:22:-:0;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;92:2641:22;;;;;;;",
  "deployedSourceMap": "92:2641:22:-:0;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;92:2641:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12:1:-1;9;2:12;1566:120:22;;;:::i;:::-;;;;;;;;;;;;;;;;265:444;;;;;;;;;:::i;:::-;;;;;;;;;1810:124;;;:::i;2429:302::-;;;;;;;;;:::i;:::-;;;;;;;;;;1079:111;;;:::i;1691:114::-;;;;;;;;;:::i;1316:124::-;;;:::i;1445:116::-;;;:::i;1195:::-;;;:::i;:::-;;;;;;;;1939:485;;;;;;;;;:::i;:::-;;;;;;;;714:221;;;;;;;;;:::i;940:134::-;;;;;;;;;:::i;1566:120::-;1664:15;;1566:120::o;265:444::-;440:12;;393;;342:25;;428;;;2:2:-1;;;;27:1;24;17:12;2:2;428:25:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;415:38:22;-1:-1:-1;467:9:22;463:240;486:5;:12;482:1;:16;463:240;;;520:12;534:16;554:5;560:1;554:8;;;;;;;;;;;;;;:15;;;:20;;575:5;581:1;575:8;;;;;;;;;;;;;;:17;;;554:39;;;;;;;;;;;;;;;;;;;;;;;12:1:-1;19;14:27;;;;67:4;61:11;56:16;;134:4;130:9;123:4;105:16;101:27;97:43;94:1;90:51;84:4;77:65;157:16;154:1;147:27;211:16;208:1;201:4;198:1;194:12;179:49;5:228;;14:27;32:4;27:9;;5:228;;519:74:22;;;;615:7;607:52;;;;;;;;;;;;;;;;;;;;;;689:3;673:10;684:1;673:13;;;;;;;;;;;;;;;;;:19;-1:-1:-1;;500:3:22;;463:240;;;;265:444;;;:::o;1810:124::-;1910:16;:12;:16;1900:27;;1810:124::o;2429:302::-;2609:12;2643:23;;2557:26;2689:35;2702:14;2718:5;2689:12;:35::i;:::-;2676:48;;2429:302;;;;;:::o;1079:111::-;1171:12;;1079:111::o;1691:114::-;1786:12;;;;1691:114::o;1316:124::-;1417:16;;1316:124::o;1445:116::-;1540:14;;1445:116::o;1195:::-;1290:14;;1195:116::o;1939:485::-;2019:26;2083:5;:12;2070:26;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;2070:26:22;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;-1:-1:-1;2057:39:22;-1:-1:-1;2110:9:22;2106:312;2129:5;:12;2125:1;:16;2106:312;;;2163:12;2177:16;2197:5;2203:1;2197:8;;;;;;;;;;;;;;:15;;;:20;;2218:5;2224:1;2218:8;;;;;;;;;;;;;;:17;;;2197:39;;;;;;;;;;;;;;;;;;;;;;;12:1:-1;19;14:27;;;;67:4;61:11;56:16;;134:4;130:9;123:4;105:16;101:27;97:43;94:1;90:51;84:4;77:65;157:16;154:1;147:27;211:16;208:1;201:4;198:1;194:12;179:49;5:228;;14:27;32:4;27:9;;5:228;;2162:74:22;;;;2255:14;2251:106;;;2297:7;2289:53;;;;;;;;;;;;;;2387:20;;;;;;;;2394:7;2387:20;;;;;;2403:3;2387:20;;;2371:10;2382:1;2371:13;;;;;;;;;;;;;;;;;:36;-1:-1:-1;;2143:3:22;;2106:312;;;;1939:485;;;;:::o;714:221::-;778:19;799:17;818:26;895:33;916:4;922:5;895:20;:33::i;:::-;856:72;;;;-1:-1:-1;856:72:22;;-1:-1:-1;714:221:22;-1:-1:-1;;714:221:22:o;940:134::-;1045:22;;940:134::o;92:2641::-;;;;;;;;;;-1:-1:-1;92:2641:22;;;;;;;;:::o;5:130:-1:-;72:20;;15382:42;15371:54;;16111:35;;16101:2;;16160:1;;16150:12;16101:2;57:78;;;;;175:744;;314:3;307:4;299:6;295:17;291:27;281:2;;-1:-1;;322:12;281:2;369:6;356:20;12606:18;;12598:6;12595:30;12592:2;;;-1:-1;;12628:12;12592:2;12673:4;391:102;12673:4;;12665:6;12661:17;12726:15;391:102;;;521:21;;;382:111;-1:-1;578:14;;;553:17;;;673:1;658:255;683:6;680:1;677:13;658:255;;;766:3;753:17;557:6;741:30;1647:4;;1626:19;741:30;1630:3;1626:19;;1622:30;1619:2;;;673:1;;1655:12;1619:2;1683:20;1647:4;1683:20;;;1787:49;1832:3;12673:4;741:30;;1787:49;;;1769:16;1762:75;1647:4;741:30;1915:18;1902:32;12606:18;1946:6;1943:30;1940:2;;;673:1;;1976:12;1940:2;2021:58;2075:3;12673:4;2066:6;741:30;2051:22;;2021:58;;;2003:16;;;1996:84;-1:-1;778:72;;-1:-1;;864:14;;;;892;;;;705:1;698:9;658:255;;;662:14;;;;;;274:645;;;;;1059:440;;1160:3;1153:4;1145:6;1141:17;1137:27;1127:2;;-1:-1;;1168:12;1127:2;1215:6;1202:20;12901:18;12893:6;12890:30;12887:2;;;-1:-1;;12923:12;12887:2;1237:64;13064:4;12996:9;1153:4;12981:6;12977:17;12973:33;13054:15;1237:64;;;1228:73;;1321:6;1314:5;1307:21;1425:3;13064:4;1416:6;1349;1407:16;;1404:25;1401:2;;;1442:1;;1432:12;1401:2;15598:6;13064:4;1349:6;1345:17;13064:4;1383:5;1379:16;15575:30;15654:1;15636:16;;;13064:4;15636:16;15629:27;1383:5;1120:379;-1:-1;;1120:379;2245:241;;2349:2;2337:9;2328:7;2324:23;2320:32;2317:2;;;-1:-1;;2355:12;2317:2;2417:53;2462:7;2438:22;2417:53;;;2407:63;2311:175;-1:-1;;;2311:175;2493:421;;2644:2;2632:9;2623:7;2619:23;2615:32;2612:2;;;-1:-1;;2650:12;2612:2;2708:17;2695:31;2746:18;2738:6;2735:30;2732:2;;;-1:-1;;2768:12;2732:2;2798:100;2890:7;2881:6;2870:9;2866:22;2798:100;;;2788:110;2606:308;-1:-1;;;;2606:308;2921:540;;;3086:2;3074:9;3065:7;3061:23;3057:32;3054:2;;;-1:-1;;3092:12;3054:2;1004:6;991:20;16257:5;15204:13;15197:21;16235:5;16232:32;16222:2;;-1:-1;;16268:12;16222:2;3144:60;-1:-1;3269:2;3254:18;;3241:32;3293:18;3282:30;;3279:2;;;-1:-1;;3315:12;3279:2;3345:100;3437:7;3428:6;3417:9;3413:22;3345:100;;;3335:110;;;3048:413;;;;;;3468:241;;3572:2;3560:9;3551:7;3547:23;3543:32;3540:2;;;-1:-1;;3578:12;3540:2;-1:-1;2175:20;;3534:175;-1:-1;3534:175;5312:1040;;5577:5;13547:12;14287:6;14282:3;14275:19;14324:4;;14319:3;14315:14;5589:117;;;;14324:4;5763:6;5759:17;5754:3;5750:27;5738:39;;14324:4;5872:5;13210:14;-1:-1;5911:402;5936:6;5933:1;5930:13;5911:402;;;5998:9;5992:4;5988:20;5983:3;5976:33;6043:6;6037:13;8192:4;8267:16;8261:23;15204:13;15197:21;6422:3;6415:34;14324:4;8425:5;8421:16;8415:23;8192:4;14324;8462:3;8458:14;8451:38;8504:71;8192:4;8187:3;8183:14;8556:12;8504:71;;;6292:14;;;;6057:120;-1:-1;;;13982:14;;;;-1:-1;5958:1;5951:9;5911:402;;;-1:-1;6336:10;;5484:868;-1:-1;;;;;;;5484:868;6581:323;;6713:5;13547:12;14287:6;14282:3;14275:19;6796:52;6841:6;14324:4;14319:3;14315:14;14324:4;6822:5;6818:16;6796:52;;;16035:2;16015:14;16031:7;16011:28;6860:39;;;;14324:4;6860:39;;6661:243;-1:-1;;6661:243;8740:262;;7071:5;13547:12;7182:52;7227:6;7222:3;7215:4;7208:5;7204:16;7182:52;;;7246:16;;;;;8865:137;-1:-1;;8865:137;9009:213;15382:42;15371:54;;;;4243:37;;9127:2;9112:18;;9098:124;9229:457;;9445:2;9466:17;9459:47;9520:156;9445:2;9434:9;9430:18;9662:6;9520:156;;9693:213;6532:37;;;9811:2;9796:18;;9782:124;9913:407;10104:2;10118:47;;;7499:2;10089:18;;;14275:19;7535:34;14315:14;;;7515:55;7604:3;7590:12;;;7583:25;7627:12;;;10075:245;10327:407;10518:2;10532:47;;;10503:18;;;14275:19;7914:34;14315:14;;;7894:55;7968:12;;;10489:245;10961:508;;11175:2;11164:9;11160:18;6562:5;6539:3;6532:37;11293:2;11175;11293;11282:9;11278:18;11271:48;11333:126;4539:5;13547:12;14287:6;14282:3;14275:19;14315:14;11164:9;14315:14;4551:102;;14315:14;11293:2;4710:6;4706:17;11164:9;4697:27;;4685:39;;11293:2;4804:5;13210:14;-1:-1;4843:357;4868:6;4865:1;4862:13;4843:357;;;4920:20;11164:9;4924:4;4920:20;;4915:3;4908:33;3836:64;3896:3;4975:6;4969:13;3836:64;;;4989:90;-1:-1;5179:14;;;;13982;;;;4890:1;4883:9;4843:357;;;-1:-1;11325:134;;11146:323;-1:-1;;;;;;;;11146:323;11476:679;;6562:5;6539:3;6532:37;6562:5;11912:2;11901:9;11897:18;6532:37;11748:2;11949;11938:9;11934:18;11927:48;11989:156;11748:2;11737:9;11733:18;12131:6;11989:156;;;11981:164;11719:436;-1:-1;;;;;11719:436;12162:256;12224:2;12218:9;12250:17;;;12325:18;12310:34;;12346:22;;;12307:62;12304:2;;;12382:1;;12372:12;12304:2;12224;12391:22;12202:216;;-1:-1;12202:216;15671:268;15736:1;15743:101;15757:6;15754:1;15751:13;15743:101;;;15824:11;;;15818:18;15805:11;;;15798:39;15779:2;15772:10;15743:101;;;15859:6;15856:1;15853:13;15850:2;;;15736:1;15915:6;15910:3;15906:16;15899:27;15850:2;;15720:219;;;",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\npragma experimental ABIEncoderV2;\n\ncontract Multicall2 {\n    struct Call {\n        address target;\n        bytes callData;\n    }\n    struct Result {\n        bool success;\n        bytes returnData;\n    }\n\n    function aggregate(Call[] memory calls) public returns (uint256 blockNumber, bytes[] memory returnData) {\n        blockNumber = block.number;\n        returnData = new bytes[](calls.length);\n        for(uint256 i = 0; i < calls.length; i++) {\n            (bool success, bytes memory ret) = calls[i].target.call(calls[i].callData);\n            require(success, \"Multicall aggregate: call failed\");\n            returnData[i] = ret;\n        }\n    }\n    function blockAndAggregate(Call[] memory calls) public returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData) {\n        (blockNumber, blockHash, returnData) = tryBlockAndAggregate(true, calls);\n    }\n    function getBlockHash(uint256 blockNumber) public view returns (bytes32 blockHash) {\n        blockHash = blockhash(blockNumber);\n    }\n    function getBlockNumber() public view returns (uint256 blockNumber) {\n        blockNumber = block.number;\n    }\n    function getCurrentBlockCoinbase() public view returns (address coinbase) {\n        coinbase = block.coinbase;\n    }\n    function getCurrentBlockDifficulty() public view returns (uint256 difficulty) {\n        difficulty = block.difficulty;\n    }\n    function getCurrentBlockGasLimit() public view returns (uint256 gaslimit) {\n        gaslimit = block.gaslimit;\n    }\n    function getCurrentBlockTimestamp() public view returns (uint256 timestamp) {\n        timestamp = block.timestamp;\n    }\n    function getEthBalance(address addr) public view returns (uint256 balance) {\n        balance = addr.balance;\n    }\n    function getLastBlockHash() public view returns (bytes32 blockHash) {\n        blockHash = blockhash(block.number - 1);\n    }\n    function tryAggregate(bool requireSuccess, Call[] memory calls) public returns (Result[] memory returnData) {\n        returnData = new Result[](calls.length);\n        for(uint256 i = 0; i < calls.length; i++) {\n            (bool success, bytes memory ret) = calls[i].target.call(calls[i].callData);\n\n            if (requireSuccess) {\n                require(success, \"Multicall2 aggregate: call failed\");\n            }\n\n            returnData[i] = Result(success, ret);\n        }\n    }\n    function tryBlockAndAggregate(bool requireSuccess, Call[] memory calls) public returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData) {\n        blockNumber = block.number;\n        blockHash = blockhash(block.number);\n        returnData = tryAggregate(requireSuccess, calls);\n    }\n}",
  "compiler": {
    "name": "solc",
    "version": "0.6.6+commit.6c089d02.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.1",
  "updatedAt": "2021-12-16T21:10:09.728Z",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  }
}